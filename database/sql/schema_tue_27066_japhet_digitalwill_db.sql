-- =====================================================
-- ENHANCED DATABASE SCHEMA FOR DIGITAL WILL MANAGEMENT SYSTEM
-- Student: Japhet (27066) - Tuesday Group
-- Database: tues_27066_japhet_digitalwill_db
-- Course: INSY 8311 - Database Development with PL/SQL
-- =====================================================

-- Drop existing tables if they exist (for fresh setup)
-- IMPORTANT: Run this section only if you want to recreate tables
/*
DROP TABLE audit_log CASCADE CONSTRAINTS;
DROP TABLE transfer_logs CASCADE CONSTRAINTS;
DROP TABLE will_asset_beneficiaries CASCADE CONSTRAINTS;
DROP TABLE documents CASCADE CONSTRAINTS;
DROP TABLE assets CASCADE CONSTRAINTS;
DROP TABLE beneficiaries CASCADE CONSTRAINTS;
DROP TABLE will_status_history CASCADE CONSTRAINTS;
DROP TABLE executors CASCADE CONSTRAINTS;
DROP TABLE wills CASCADE CONSTRAINTS;
DROP TABLE holidays CASCADE CONSTRAINTS;
DROP TABLE users CASCADE CONSTRAINTS;
*/

-- =====================================================
-- 1. USERS TABLE (Enhanced for Flask App)
-- =====================================================
CREATE TABLE users (
    user_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    full_name VARCHAR2(100) NOT NULL,
    email VARCHAR2(100) UNIQUE NOT NULL,
    password_hash VARCHAR2(255), -- Added for Flask authentication
    phone_number VARCHAR2(20),
    date_of_birth DATE,
    address VARCHAR2(500), -- Increased size for longer addresses
    initial_role VARCHAR2(20) CHECK (initial_role IN ('testator', 'executor', 'beneficiary', 'admin')), -- Added for role management
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Changed to TIMESTAMP for precision
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Index for performance
CREATE INDEX idx_users_email ON users(email);
CREATE INDEX idx_users_role ON users(initial_role);

-- =====================================================
-- 2. WILLS TABLE (Enhanced)
-- =====================================================
CREATE TABLE wills (
    will_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id NUMBER NOT NULL,
    title VARCHAR2(200) NOT NULL, -- Increased size
    description CLOB, -- Changed to CLOB for longer descriptions
    status VARCHAR2(20) DEFAULT 'Draft' CHECK (status IN ('Draft', 'Approved', 'Executed', 'Revoked')),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    approved_at TIMESTAMP, -- Added for tracking approval
    last_updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    -- Foreign key constraint
    CONSTRAINT fk_wills_user FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);

-- Indexes for performance
CREATE INDEX idx_wills_user ON wills(user_id);
CREATE INDEX idx_wills_status ON wills(status);

-- =====================================================
-- 3. EXECUTORS TABLE (Enhanced)
-- =====================================================
CREATE TABLE executors (
    executor_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    will_id NUMBER NOT NULL,
    full_name VARCHAR2(100) NOT NULL,
    email VARCHAR2(100) NOT NULL,
    phone_number VARCHAR2(20),
    relation VARCHAR2(50),
    is_primary CHAR(1) DEFAULT 'N' CHECK (is_primary IN ('Y', 'N')),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    -- Foreign key constraint
    CONSTRAINT fk_executors_will FOREIGN KEY (will_id) REFERENCES wills(will_id) ON DELETE CASCADE
);

-- Indexes for performance
CREATE INDEX idx_executors_will ON executors(will_id);
CREATE INDEX idx_executors_email ON executors(email);
CREATE INDEX idx_executors_primary ON executors(is_primary);

-- =====================================================
-- 4. BENEFICIARIES TABLE (Enhanced)
-- =====================================================
CREATE TABLE beneficiaries (
    beneficiary_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    full_name VARCHAR2(100) NOT NULL,
    relation VARCHAR2(50) NOT NULL,
    email VARCHAR2(100),
    phone_number VARCHAR2(20),
    address VARCHAR2(500), -- Increased size
    date_of_birth DATE,
    notes CLOB, -- Changed to CLOB for longer notes
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Indexes for performance
CREATE INDEX idx_beneficiaries_email ON beneficiaries(email);
CREATE INDEX idx_beneficiaries_name ON beneficiaries(full_name);

-- =====================================================
-- 5. ASSETS TABLE (Enhanced)
-- =====================================================
CREATE TABLE assets (
    asset_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    will_id NUMBER NOT NULL,
    name VARCHAR2(200) NOT NULL, -- Increased size
    description CLOB, -- Changed to CLOB for longer descriptions
    asset_type VARCHAR2(50) NOT NULL,
    value NUMBER(15,2) CHECK (value >= 0), -- Increased precision for large assets
    location VARCHAR2(500), -- Increased size
    acquisition_date DATE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    -- Foreign key constraint
    CONSTRAINT fk_assets_will FOREIGN KEY (will_id) REFERENCES wills(will_id) ON DELETE CASCADE
);

-- Indexes for performance
CREATE INDEX idx_assets_will ON assets(will_id);
CREATE INDEX idx_assets_type ON assets(asset_type);
CREATE INDEX idx_assets_value ON assets(value);

-- =====================================================
-- 6. WILL_ASSET_BENEFICIARIES TABLE (Enhanced)
-- =====================================================
CREATE TABLE will_asset_beneficiaries (
    mapping_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    asset_id NUMBER NOT NULL,
    beneficiary_id NUMBER NOT NULL,
    share_percent NUMBER(5,2) NOT NULL CHECK (share_percent > 0 AND share_percent <= 100),
    conditions CLOB, -- Changed to CLOB for complex conditions
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    -- Foreign key constraints
    CONSTRAINT fk_wab_asset FOREIGN KEY (asset_id) REFERENCES assets(asset_id) ON DELETE CASCADE,
    CONSTRAINT fk_wab_beneficiary FOREIGN KEY (beneficiary_id) REFERENCES beneficiaries(beneficiary_id) ON DELETE CASCADE,
    
    -- Unique constraint to prevent duplicate assignments
    CONSTRAINT uk_asset_beneficiary UNIQUE (asset_id, beneficiary_id)
);

-- Indexes for performance
CREATE INDEX idx_wab_asset ON will_asset_beneficiaries(asset_id);
CREATE INDEX idx_wab_beneficiary ON will_asset_beneficiaries(beneficiary_id);

-- =====================================================
-- 7. TRANSFER_LOGS TABLE (Enhanced)
-- =====================================================
CREATE TABLE transfer_logs (
    transfer_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    asset_id NUMBER NOT NULL,
    beneficiary_id NUMBER NOT NULL,
    transfer_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    approved_by VARCHAR2(100),
    transfer_status VARCHAR2(20) DEFAULT 'Initiated' CHECK (transfer_status IN ('Initiated', 'In Progress', 'Completed', 'Failed', 'Cancelled')),
    notes CLOB, -- Changed to CLOB for detailed notes
    
    -- Foreign key constraints
    CONSTRAINT fk_transfer_asset FOREIGN KEY (asset_id) REFERENCES assets(asset_id) ON DELETE CASCADE,
    CONSTRAINT fk_transfer_beneficiary FOREIGN KEY (beneficiary_id) REFERENCES beneficiaries(beneficiary_id) ON DELETE CASCADE
);

-- Indexes for performance
CREATE INDEX idx_transfer_asset ON transfer_logs(asset_id);
CREATE INDEX idx_transfer_beneficiary ON transfer_logs(beneficiary_id);
CREATE INDEX idx_transfer_status ON transfer_logs(transfer_status);
CREATE INDEX idx_transfer_date ON transfer_logs(transfer_date);

-- =====================================================
-- 8. HOLIDAYS TABLE (Enhanced for Weekend/Holiday Blocking)
-- =====================================================
CREATE TABLE holidays (
    holiday_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    holiday_date DATE NOT NULL UNIQUE,
    holiday_name VARCHAR2(100) NOT NULL, -- Added name field
    description VARCHAR2(500),
    is_active CHAR(1) DEFAULT 'Y' CHECK (is_active IN ('Y', 'N')), -- Added active flag
    is_recurring CHAR(1) DEFAULT 'N' CHECK (is_recurring IN ('Y', 'N')),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Index for performance
CREATE INDEX idx_holidays_date ON holidays(holiday_date);
CREATE INDEX idx_holidays_active ON holidays(is_active);

-- =====================================================
-- 9. DOCUMENTS TABLE (Enhanced)
-- =====================================================
CREATE TABLE documents (
    document_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    related_entity VARCHAR2(20) NOT NULL CHECK (related_entity IN ('WILL', 'ASSET')),
    entity_id NUMBER NOT NULL,
    title VARCHAR2(200) NOT NULL, -- Increased size
    description VARCHAR2(500),
    file_path VARCHAR2(1000), -- Increased size for longer paths
    file_type VARCHAR2(50),
    file_size NUMBER, -- Added file size tracking
    upload_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    uploaded_by VARCHAR2(100) -- Added to track who uploaded
);

-- Indexes for performance
CREATE INDEX idx_documents_entity ON documents(related_entity, entity_id);
CREATE INDEX idx_documents_type ON documents(file_type);

-- =====================================================
-- 10. AUDIT_LOG TABLE (Enhanced for Compliance)
-- =====================================================
CREATE TABLE audit_log (
    audit_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_name VARCHAR2(100), -- Increased size
    action VARCHAR2(50) NOT NULL, -- Increased size for detailed actions
    action_table VARCHAR2(50),
    record_id NUMBER,
    old_values CLOB,
    new_values CLOB,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Changed to TIMESTAMP
    status VARCHAR2(20), -- Increased size
    ip_address VARCHAR2(50), -- Increased size for IPv6
    session_id VARCHAR2(100), -- Added session tracking
    user_agent VARCHAR2(500) -- Added browser/client info
);

-- Indexes for performance
CREATE INDEX idx_audit_user ON audit_log(user_name);
CREATE INDEX idx_audit_action ON audit_log(action);
CREATE INDEX idx_audit_table ON audit_log(action_table);
CREATE INDEX idx_audit_timestamp ON audit_log(timestamp);

-- =====================================================
-- 11. WILL_STATUS_HISTORY TABLE (Enhanced)
-- =====================================================
CREATE TABLE will_status_history (
    history_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    will_id NUMBER NOT NULL,
    old_status VARCHAR2(20),
    new_status VARCHAR2(20) NOT NULL,
    changed_by VARCHAR2(100),
    change_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Changed to TIMESTAMP
    reason VARCHAR2(500), -- Increased size
    ip_address VARCHAR2(50), -- Added for audit trail
    
    -- Foreign key constraint
    CONSTRAINT fk_history_will FOREIGN KEY (will_id) REFERENCES wills(will_id) ON DELETE CASCADE
);

-- Index for performance
CREATE INDEX idx_history_will ON will_status_history(will_id);
CREATE INDEX idx_history_date ON will_status_history(change_date);

-- =====================================================
-- SEQUENCES (If needed for compatibility)
-- =====================================================
-- Note: Using IDENTITY columns, but creating sequences for potential stored procedure use
CREATE SEQUENCE seq_users START WITH 1000 INCREMENT BY 1 NOCACHE;
CREATE SEQUENCE seq_wills START WITH 1000 INCREMENT BY 1 NOCACHE;
CREATE SEQUENCE seq_assets START WITH 1000 INCREMENT BY 1 NOCACHE;
CREATE SEQUENCE seq_beneficiaries START WITH 1000 INCREMENT BY 1 NOCACHE;
CREATE SEQUENCE seq_executors START WITH 1000 INCREMENT BY 1 NOCACHE;
CREATE SEQUENCE seq_transfer_logs START WITH 1000 INCREMENT BY 1 NOCACHE;

-- =====================================================
-- INITIAL DATA SETUP
-- =====================================================

-- Insert sample holidays for testing weekend/holiday blocking
INSERT INTO holidays (holiday_date, holiday_name, description, is_active) VALUES 
(DATE '2025-01-01', 'New Year''s Day', 'New Year celebration', 'Y');
INSERT INTO holidays (holiday_date, holiday_name, description, is_active) VALUES 
(DATE '2025-12-25', 'Christmas Day', 'Christmas celebration', 'Y');
INSERT INTO holidays (holiday_date, holiday_name, description, is_active) VALUES 
(DATE '2025-07-04', 'Independence Day', 'Independence Day celebration', 'Y');

-- =====================================================
-- TRIGGERS FOR AUTOMATIC UPDATES
-- =====================================================

-- Trigger to update last_updated_at in wills table
CREATE OR REPLACE TRIGGER trg_wills_update
    BEFORE UPDATE ON wills
    FOR EACH ROW
BEGIN
    :NEW.last_updated_at := CURRENT_TIMESTAMP;
END;
/

-- Trigger to update users table timestamp
CREATE OR REPLACE TRIGGER trg_users_update
    BEFORE UPDATE ON users
    FOR EACH ROW
BEGIN
    :NEW.updated_at := CURRENT_TIMESTAMP;
END;
/

-- =====================================================
-- VIEWS FOR COMMON QUERIES
-- =====================================================

-- View for will summary with owner information
CREATE OR REPLACE VIEW v_will_summary AS
SELECT 
    w.will_id,
    w.title,
    w.description,
    w.status,
    w.created_at,
    w.approved_at,
    u.full_name as owner_name,
    u.email as owner_email,
    (SELECT COUNT(*) FROM assets a WHERE a.will_id = w.will_id) as asset_count,
    (SELECT COUNT(*) FROM executors e WHERE e.will_id = w.will_id) as executor_count,
    (SELECT NVL(SUM(a.value), 0) FROM assets a WHERE a.will_id = w.will_id) as total_value
FROM wills w
JOIN users u ON w.user_id = u.user_id;

-- View for asset allocation details
CREATE OR REPLACE VIEW v_asset_allocation AS
SELECT 
    a.asset_id,
    a.name as asset_name,
    a.asset_type,
    a.value as asset_value,
    b.full_name as beneficiary_name,
    b.relation,
    wab.share_percent,
    (a.value * wab.share_percent / 100) as allocated_value,
    w.title as will_title,
    u.full_name as will_owner
FROM assets a
JOIN will_asset_beneficiaries wab ON a.asset_id = wab.asset_id
JOIN beneficiaries b ON wab.beneficiary_id = b.beneficiary_id
JOIN wills w ON a.will_id = w.will_id
JOIN users u ON w.user_id = u.user_id;

-- =====================================================
-- GRANTS AND PERMISSIONS
-- =====================================================
-- Grant necessary permissions for the capstone user
-- (These should already be granted, but included for completeness)

-- GRANT ALL PRIVILEGES TO tues_27066_japhet_digitalwill_db;
-- GRANT CREATE SESSION TO tues_27066_japhet_digitalwill_db;
-- GRANT CREATE TABLE TO tues_27066_japhet_digitalwill_db;
-- GRANT CREATE PROCEDURE TO tues_27066_japhet_digitalwill_db;
-- GRANT CREATE TRIGGER TO tues_27066_japhet_digitalwill_db;
-- GRANT CREATE SEQUENCE TO tues_27066_japhet_digitalwill_db;
-- GRANT CREATE VIEW TO tues_27066_japhet_digitalwill_db;
-- GRANT UNLIMITED TABLESPACE TO tues_27066_japhet_digitalwill_db;

-- =====================================================
-- VERIFICATION QUERIES
-- =====================================================

-- Check table creation
SELECT table_name, num_rows 
FROM user_tables 
ORDER BY table_name;

-- Check indexes
SELECT index_name, table_name 
FROM user_indexes 
WHERE table_name IN (
    'USERS', 'WILLS', 'ASSETS', 'BENEFICIARIES', 'EXECUTORS',
    'WILL_ASSET_BENEFICIARIES', 'TRANSFER_LOGS', 'AUDIT_LOG', 'HOLIDAYS'
)
ORDER BY table_name, index_name;

-- Check foreign key constraints
SELECT constraint_name, table_name, r_constraint_name
FROM user_constraints 
WHERE constraint_type = 'R'
ORDER BY table_name;

-- =====================================================
-- COMMIT ALL CHANGES
-- =====================================================
COMMIT;

-- Display success message
SELECT 'Enhanced Database Schema Created Successfully!' as status,
       'Ready for Digital Will Management System' as message,
       USER as database_user,
       sys_context('USERENV', 'CON_NAME') as container_name
FROM dual;